#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation error\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertNode(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void displayList(Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

Node* reverseFirstN(Node* head, int n) {
    Node* current = head;
    Node* prev = NULL;
    Node* next = NULL;
    int count = 0;

    while (current != NULL && count < n) {
        next = current->next; // Save the next node
        current->next = prev; // Reverse the link
        prev = current;       // Move to the next nodes
        current = next;
        count++;
    }

    if (next != NULL) {
        head->next = next; // Connect the remaining elements to the reversed portion
    }

    return prev; // New head of the reversed portion
}

int main() {
    Node* head = NULL;
    int n, data;

    printf("Enter the number of elements in the linked list: ");
    scanf("%d", &n);

    printf("Enter the elements of the linked list: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        insertNode(&head, data);
    }

    printf("Original linked list: ");
    displayList(head);

    int numToReverse;
    printf("Enter the number of elements to reverse: ");
    scanf("%d", &numToReverse);

    head = reverseFirstN(head, numToReverse);

    printf("Linked list after reversing first %d elements: ", numToReverse);
    displayList(head);

    // Free memory
    while (head != NULL) {
        Node* temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
