#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
} node;

node *getLastNode(node *head) {
    if (head == NULL) {
        return NULL;
    }
    node *last = head;
    while (last->next != head) {
        last = last->next;
    }
    return last;
}

void traverse(node *head) {
    int count = 1;
    node *p = head;
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    do {
        printf("\nNode_%d _info: %d", count, p->data);
        count++;
        p = p->next;
    } while (p != head);
}

void insert_begin(node **head, int item) {
    node *new_node = (node*) malloc(sizeof(node));
    new_node->data = item;
    if (*head == NULL) {
        new_node->next = new_node; // point to itself in a circular list
        *head = new_node;
    } else {
        new_node->next = (*head)->next;
        (*head)->next = new_node;
    }
}

void insert_end(node **head, int item) {
    node *new_node = (node*) malloc(sizeof(node));
    new_node->data = item;
    if (*head == NULL) {
        new_node->next = new_node; // point to itself in a circular list
        *head = new_node;
    } else {
        new_node->next = (*head)->next;
        (*head)->next = new_node;
        *head = new_node;
    }
}

void insert_any_position(node **head, int item, int pos) {
    if (pos < 1) {
        printf("Invalid position\n");
        return;
    }

    node *new_node = (node*) malloc(sizeof(node));
    new_node->data = item;

    if (*head == NULL || pos == 1) {
        if (*head == NULL) {
            new_node->next = new_node; // point to itself in a circular list
            *head = new_node;
        } else {
            new_node->next = (*head)->next;
            (*head)->next = new_node;
        }
        return;
    }

    node *p = *head;
    for (int i = 1; i < pos - 1 && p->next != *head; i++) {
        p = p->next;
    }

    if (p->next == *head && pos > 1) {
        printf("Position out of range\n");
        free(new_node);
        return;
    }

    new_node->next = p->next;
    p->next = new_node;
}

void delete_begin(node **head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    if ((*head)->next == *head) {
        free(*head);
        *head = NULL;
    } else {
        node *temp = (*head)->next;
        (*head)->next = temp->next;
        free(temp);
    }
}

void delete_end(node **head) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    if ((*head)->next == *head) {
        free(*head);
        *head = NULL;
    } else {
        node *p = *head, *q = NULL;
        while (p->next != *head) {
            q = p;
            p = p->next;
        }
        q->next = p->next;
        free(p);
    }
}

void delete_any_pos(node **head, int pos) {
    if (*head == NULL || pos < 1) {
        printf("Invalid position or empty list\n");
        return;
    }

    if (pos == 1) {
        node *temp = *head;
        if ((*head)->next == *head) {
            free(*head);
            *head = NULL;
        } else {
            (*head)->next = temp->next;
            free(temp);
        }
        return;
    }

    node *p = *head, *q = NULL;
    for (int i = 1; i < pos && p != *head; i++) {
        q = p;
        p = p->next;
    }

    if (p == *head) {
        printf("Position out of range\n");
        return;
    }

    q->next = p->next;
    free(p);
}

void sort_ascending(node **head) {
    if (*head == NULL || (*head)->next == *head) {
        return;
    }
    node *last = getLastNode(*head);
    node *end = NULL;
    int swapped;
    do {
        swapped = 0;
        node *curr = *head;
        while (curr->next != end) {
            if (curr->data > curr->next->data) {
                int temp = curr->data;
                curr->data = curr->next->data;
                curr->next->data = temp;
                swapped = 1;
            }
            curr = curr->next;
            if (curr->next == *head) {
                end = curr;
            }
        }
    } while (swapped);
}

void sort_descending(node **head) {
    if (*head == NULL || (*head)->next == *head) {
        return;
    }
    node *last = getLastNode(*head);
    node *end = NULL;
    int swapped;
    do {
        swapped = 0;
        node *curr = *head;
        while (curr->next != end) {
            if (curr->data < curr->next->data) {
                int temp = curr->data;
                curr->data = curr->next->data;
                curr->next->data = temp;
                swapped = 1;
            }
            curr = curr->next;
            if (curr->next == *head) {
                end = curr;
            }
        }
    } while (swapped);
}

int main() {
    node *head = NULL;
    int choice, item, pos;

    while (1) {
        printf("\n\nCircular Linked List Operations\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert at any position\n");
        printf("4. Delete from beginning\n");
        printf("5. Delete from end\n");
        printf("6. Delete from any position\n");
        printf("7. Traverse\n");
        printf("8. Sort in ascending order\n");
        printf("9. Sort in descending order\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the item to be inserted: ");
                scanf("%d", &item);
                insert_begin(&head, item);
                break;
            case 2:
                printf("Enter the item to be inserted: ");
                scanf("%d", &item);
                insert_end(&head, item);
                break;
            case 3:
                printf("Enter the item to be inserted: ");
                scanf("%d", &item);
                printf("Enter the position at which to insert: ");
                scanf("%d", &pos);
                insert_any_position(&head, item, pos);
                break;
            case 4:
                delete_begin(&head);
                break;
            case 5:
                delete_end(&head);
                break;
            case 6:
                printf("Enter the position at which to delete: ");
                scanf("%d", &pos);
                delete_any_pos(&head, pos);
                break;
            case 7:
                traverse(head);
                break;
            case 8:
                sort_ascending(&head);
                traverse(head);
                break;
            case 9:
                sort_descending(&head);
                traverse(head);
                break;
            case 10:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
